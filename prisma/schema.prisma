generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  events        Event[]
  perspectives  Perspective[]
  collection    collection[]
}

model Event {
  id               String                    @id @default(cuid())
  title            String
  description      String
  imageUrl         String
  date             DateTime
  tags             String[]
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  userId           String
  geom             Unsupported("geography")?
  user             User                      @relation(fields: [userId], references: [id])
  perspectives     Perspective[]
  collection_event collection_event[]
}

model Perspective {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Timeline {
  id                 String          @id @default(cuid())
  title              String
  description        String?
  backgroundColor    String?
  backgroundImageUrl String?
  backgroundImageAlt String?
  userId             String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now()) @updatedAt
  timelineEvents     TimelineEvent[]

  @@index([userId])
}

model TimelineEvent {
  id         String   @id @default(cuid())
  timelineId String
  eventId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([eventId])
  @@index([timelineId, eventId])
  @@index([timelineId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model collection {
  id               String             @id
  name             String             @db.VarChar(255)
  description      String?
  userId           String
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?          @default(now()) @db.Timestamp(6)
  num              Int?               @default(0)
  User             User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "collection_userid_fkey")
  collection_event collection_event[]
}

model collection_event {
  id           String     @id(map: "collectionevent_pkey")
  collectionId String
  eventId      String
  createdAt    DateTime?  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?  @default(now()) @db.Timestamp(6)
  collection   collection @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "collectionevent_collectionid_fkey")
  Event        Event      @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "collectionevent_eventid_fkey")
}
